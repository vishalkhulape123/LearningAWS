                                                      Docker Start


\_    sudo apt-get update
\_    docker

Command 'docker' not found, but can be installed with:
sudo snap install docker         # version 27.2.0, or
sudo apt  install docker.io      # version 24.0.7-0ubuntu4.1
sudo apt  install podman-docker  # version 4.9.3+ds1-1ubuntu0.2
See 'snap info docker' for additional versions.

\_    sudo apt  install docker.io 
\_    docker                                                        => to ckeck docker is install or not
\_    sudo docker ps -a                                             => to check information about available containers running and exited       
\_    sudo docker images                                            => to check the available docker images
\_    sudo docker run --name my-docker-nginx-server -p 80:80 nginx  => Notice also that in your terminal, a log for Nginx is being updated when you make requests to your server. This is because youâ€™re running your container interactively.    
\_    Ctrl + C                                                      => Exit running server
\_    sudo docker run --name my-docker-nginx -p80:80 -d nginx       => Create a new, detached Nginx container with this command:
\_    sudo docker stop my-docker-nginx                              => to stop the docker container
\_    sudo docker start my-docker-nginx                             => to stop docker container 

                                                    Dockerfile

A Dockerfile is essentially a text file (literally written as "Dockerfile" with no extension) 
that contains instructions for creating a Docker image.


Now, follow the steps below to create the Dockerfile:

Step#1 - Specify the base image
         
         FROM python:3.11-slim

Step#2 - Set the working directory

         WORKDIR /app 

Step#3 - Install dependencies

         RUN pip install flask==2.3

Step#4 - Copy application files to the container

         COPY . /app

Step#5 - Specify the environment variable

         ENV FLASK_APP=app.py

Step#6 - Define the default command

         CMD ["flask", "run", "--host=0.0.0.0", "--port=5000"]

   
      
                                                    Custom COntainer


Step#1 - install docker

Step#2 - Create App to be run on container

Step#3 - Create dockerfile 

Step#4 - Create image from docker file

Ste#5 - create docker container based on docker file




                                                      Docker commands


Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Common Commands:
  run         Create and run a new container from an image
  exec        Execute a command in a running container
  ps          List containers
  build       Build an image from a Dockerfile
  pull        Download an image from a registry
  push        Upload an image to a registry
  images      List images
  login       Log in to a registry
  logout      Log out from a registry
  search      Search Docker Hub for images
  version     Show the Docker version information
  info        Display system-wide information

Management Commands:
  builder     Manage builds
  checkpoint  Manage checkpoints
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  plugin      Manage plugins
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Swarm Commands:
  config      Manage Swarm configs
  node        Manage Swarm nodes
  secret      Manage Swarm secrets
  service     Manage Swarm services
  stack       Manage Swarm stacks
  swarm       Manage Swarm

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff   u     Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes

Global Options:
      --config string      Location of client config files (default "/home/ubuntu/.docker")
  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST
                           env var and default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket to connect to
  -l, --log-level string   Set the logging level ("debug", "info", "warn", "error", "fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/home/ubuntu/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/home/ubuntu/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/home/ubuntu/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Run 'docker COMMAND --help' for more information on a command.

